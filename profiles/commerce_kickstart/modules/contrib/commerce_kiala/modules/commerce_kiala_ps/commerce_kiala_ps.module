<?php

/**
 * @file
 * Allows you to define any number of Kiala shipping services
 */

/**
 * Implements hook_menu().
 */
function commerce_kiala_ps_menu() {
  $items = array();

  $items['admin/commerce/orders/%commerce_order/kiala_packship'] = array(
    'title' => 'Export packship data',
    'page callback' => 'commerce_kiala_ps_order_packship_export_page',
    'page arguments' => array(3),
    'access callback' => 'commerce_kiala_ps_order_packship_export_access',
    'access arguments' => array(3),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 15,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  return $items;
}

/*
 * Access callback for packship export page
 */
function commerce_kiala_ps_order_packship_export_access($order) {
  if (!user_access('administer kiala services')) {
    return FALSE;
  }

  // Order must have a weight
  $weight = commerce_physical_order_weight($order, 'kg');

  if (empty($weight['weight'])) {
    return FALSE;
  }

  // Order must have been checkout_complete
  if (!commerce_kiala_order_completed_date($order)) {
    return FALSE;
  }

  // Order must have a shipping address
  if (empty($order->commerce_customer_shipping)) {
    return FALSE;
  }

  return TRUE;
}

/*
 * Render callback for packship export page
 */
function commerce_kiala_ps_order_packship_export_page($order) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $export = $wrapper->kiala_packship_export->value();

  if (is_string($export)) {
    // Deliver the raw export text
    drupal_add_http_header('Content-disposition', 'attachment; filename=order-' . $order->order_id . '.kiala');
    echo $export;
  }
  else {
    foreach ($export['errors'] as $error_msg) {
      drupal_set_message($error_msg, 'error');
    }

    return t('Export failed.');
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
/*
function commerce_kiala_ps_form_commerce_kiala_settings_form_alter(&$form, &$form_state, $form_id) {
  $kiala_contact_mail = 'e-commerce@kiala.com';
  $default_values = commerce_kiala_settings(array(
    'include_passwords' => FALSE,
    'decrypt' => TRUE,
  ));
  $password_hashes = commerce_kiala_settings(array(
    'include_passwords' => TRUE,
    'conditions' => array('password' => TRUE),
  ));


  $form['commerce_kiala_packship'] = array(
    '#type' => 'fieldset',
    '#title' => t('Pack and Ship'),
    '#collapsible' => TRUE,
    '#group' => 'groups',
    '#weight' => 1,
    '#description' => t('In order to use Pack and Ship, you must have an account with Kiala. You can contact Kiala at !mail', array('!mail' => $kiala_contact_mail)),
  );
  $form['commerce_kiala_packship']['packship_type'] = array(
    '#type' => 'select',
    '#title' => t('Sender ID'),
    '#default_value' => isset($default_values['packship_type']) ? $default_values['packship_type'] : '',
    '#required' => TRUE,
    '#options' => array(
      'ws' => t('Web Service'),
      'desktop' => t('Desktop'),
      'web' => t('Web (deprecated)'),
    ),
    '#description' => t('In order to use Desktop or Web, please contact Kiala at !mail', array('!mail' => $kiala_contact_mail)),
  );

  $packship_active_states = array(
    'ws' => array(
      ':input[name*="packship_type"]' => array('value' => 'ws')
    ),
    'desktop' => array(
      ':input[name*="packship_type"]' => array('value' => 'desktop')
    ),
    'web' => array(
      ':input[name*="packship_type"]' => array('value' => 'web')
    ),
  );


  $form['commerce_kiala_packship']['packship_ws'] = array(
    '#type' => 'fieldset',
    '#title' => t('Web Service Settings'),
    '#states' => array(
      'visible' => $packship_active_states['ws'],
    ),
  );
  $form['commerce_kiala_packship']['packship_ws']['packship_ws_sender_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Sender ID'),
    '#default_value' => isset($default_values['packship_ws_sender_id']) ? $default_values['packship_ws_sender_id'] : '',
    '#states' => array(
      'required' => $packship_active_states['ws'],
    ),
  );
  $form['commerce_kiala_packship']['packship_ws']['packship_ws_password'] = array(
    '#type' => 'password',
    '#title' => t('Password'),
    '#description' => t('Please leave blank if you do not want to update your password at this time.'),
  );
  if (empty($password_hashes['packship_ws_password'])) {
    $form['commerce_kiala_packship']['packship_ws']['packship_ws_password']['#states'] = array(
      'required' => $packship_active_states['ws'],
    );
  }
  $form['commerce_kiala_packship']['packship_ws']['packship_ws_url'] = array(
    '#type' => 'textfield',
    '#title' => t('API URL'),
    '#default_value' => isset($default_values['packship_ws_url']) ? $default_values['packship_ws_url'] : '',
    '#states' => array(
      'required' => $packship_active_states['ws'],
    ),
  );

  $form['commerce_kiala_packship']['packship_ws']['packship_ws_params'] = array(
    '#type' => 'fieldset',
    '#collapsible' => !empty($default_values['packship_ws_params']),
    '#tree' => TRUE,
    '#title' => t('URL Parameters'),
    '#attributes' => array('class' => array('commerce-kiala-url-params')),
  );
  if (!empty($default_values['packship_ws_params'])) {
    foreach ($default_values['packship_ws_params'] as $param => $param_value) {
      $form['commerce_kiala_packship']['packship_ws']['packship_ws_params'][$param] = array(
        '#type' => 'textfield',
        '#field_prefix' => check_plain($param),
        '#default_value' => $param_value,
      );
    }
  }
  else {
    $form['commerce_kiala_packship']['packship_ws']['packship_ws_params']['no_params'] = array(
      '#markup' => t('No parameters defined'),
    );
  }

  $form['#validate'][] = 'commerce_kiala_ps_settings_form_validate';
}
*/
/**
 * Validate callback for commerce_kiala_settings_form()
 */
/*
function commerce_kiala_ps_settings_form_validate($form, &$form_state) {
  $values = &$form_state['values'];

  // get the stored passwords untouched from the database
  $current_password_hashes = commerce_kiala_settings(array(
    'include_passwords' => TRUE,
    'decrypt' => FALSE,
    'conditions' => array('password' => TRUE),
  ));

  // Pack & Ship conditional validation
  if (isset($values['packship_type']) && $values['packship_type'] == 'ws') {
    if (empty($values['packship_ws_sender_id'])) {
      form_set_error('packship_ws_sender_id', t('You must enter a Sender ID for the Pack & Ship Web Service.'));
      return;
    }

    if (empty($values['packship_ws_password'])) {
      if (empty($current_password_hashes['packship_ws_password'])) {
        form_set_error('packship_ws_password', t('You must enter a password for the Pack & Ship Web Service.'));
        return;
      }
    }
  }
}
*/

/*
 * Order metadata callback
 */
function commerce_kiala_ps_order_property_get($entity, array $options, $name) {
  switch ($name) {
    case 'kiala_packship_export':

      // This will either return a string or an errors array.
      return commerce_kiala_ps_build_export(array($entity));

      break;
  }
}

/**
 * Build the export string for a list of orders
 *
 * @param type $orders
 * @return type
 */
function commerce_kiala_ps_build_export($orders) {
  $settings = commerce_kiala_settings();
  $countries_enabled = $settings['shipping_countries_enabled'];

  // In the export values are keyed only by position, so this mapping makes it
  // possible to keep track of things by name.
  $map = array(
    'partnerId',
    'partnerBarcode',
    'parcelNumber',
    'orderNumber',
    'orderDate',
    'invoiceNumber',
    'invoiceDate',
    'shipmentNumber',
    'CODAmount',
    'commercialValue',
    'parcelWeight',
    'parcelVolume',
    'parcelDescription',
    'customerId',
    'customerName',
    'customerFirstname',
    'customerTitle',
    'customerStreet',
    'customerStreetnumber',
    'customerExtraAddressLine',
    'customerZip',
    'customerCity',
    'customerLocality',
    'customerLanguage',
    'customerPhone1',
    'customerPhone2',
    'customerPhone3',
    'customerEmail1',
    'customerEmail2',
    'customerEmail3',
    'positiveNotificationRequested',
    'kialaPoint',
    'backupKialaPoint',
  );

  $output_string = '';

  foreach ($orders as $order) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);

    // partnerId
    $export['partnerId'] = $settings['dspid'];

    // parcelNumber
    $export['parcelNumber'] = $settings['dspid'] . '_' . $order->order_id;

    // orderNumber
    $export['orderNumber'] = $order->order_id;

    // orderDate
    $timestamp = commerce_kiala_order_completed_date($order);

    if (!$timestamp) {
      $errors[] = t('The customer has not completed checkout for this order.');
    }
    else {
      $export['orderDate'] = date('Ymd', $timestamp);
    }

    // CODAmount. Set to zero because commerce customer will just be paying for
    // everything online.
    $export['CODAmount'] = '0.00';

    // commercialValue (order total amount)
    $amount = commerce_currency_amount_to_decimal($wrapper->commerce_order_total->amount->value(), commerce_default_currency());
    $export['commercialValue'] = number_format((float)$amount, 2, '.', '');

    // parcelWeight
    $weight = commerce_physical_order_weight($order, 'kg');

    if (empty($weight['weight'])) {
      $errors[] = t('A product in this order does not have a weight.');
    }
    $export['parcelWeight'] = number_format((float)$weight['weight'], 3, '.', '');

    //parcelVolume (liters i.e. 1000 cc)
    $volume = commerce_physical_order_volume($order, 'cm');
    $liters = $volume['volume'] / 1000;
    $export['parcelVolume'] = number_format((float)$liters, 3, '.', '');

    // Customer fields
    if (!empty($order->commerce_customer_shipping)) {
      $export['customerId'] = $wrapper->commerce_customer_shipping->profile_id->value();

      $address = $wrapper->commerce_customer_shipping->commerce_customer_address->value();
      $export['customerName'] = commerce_kiala_ps_parse_name($address['name_line']);
      $export['customerStreet'] = $address['thoroughfare'];
      $export['customerExtraAddressLine'] = $address['premise'];
      $export['customerZip'] = $address['postal_code'];
      $export['customerCity'] = $address['locality'];

      // customerLanguage (DSP language)
      if (commerce_kiala_ps_language_combinations_match(language_default()->language, $address['country'])) {
        $export['customerLanguage'] = language_default()->language;
      }
      else {
        $errors[] = t('Language is not supported.');
      }
    }
    else {
      $errors[] = t('No shipping profile found.');
    }

    // customerEmail1
    $export['customerEmail1'] = $order->mail;

    // positiveNotificationRequested @TODO opt-in field
    $export['positiveNotificationRequested'] = 'yes';

    // kialaPoint
    $export['kialaPoint'] = $wrapper->kiala_point_id->value();

    // Allow modules to add to the export
    drupal_alter('commerce_kiala_ps_export', $export, $order);

    // Fill in missing values and sort by mapping order
    foreach ($map as $key) {
      if (isset($export[$key])) {
        // Check for illegal characters
        if (strstr($export[$key], '|')) {
          $errors[] = t('Pipe character found in data, please remove and reinitiate export');
          break;
        }
        $output[] = $export[$key];
      }
      else {
        $output[] = '';
      }
    }

    if (isset($errors)) {
      return array('errors' => $errors);
    }
  }

  // Convert to string
  return implode('|', $output);
}

/**
 * Return an address name line string in "lastname firstname" format.
 *
 * @param type $name
 * @return type
 */
function commerce_kiala_ps_parse_name($name) {
  // For common 2 part space separated names
  $parts = explode(' ', $name);

  if (count($parts) == 2) {
    return $parts[1] . ' ' . $parts[0];
  }

  // Otherwise just leave as is.
  return $name;
}

/**
 * Return a list of support packship language-country combinations
 *
 * @return array
 * @ref http://packandship.kiala.com/desktop/doc/technical/description-of-import-fields.html
 */
function commerce_kiala_ps_language_combinations() {
  return array(
    'fr' => array('BE', 'FR'),
    'nl' => array('NL', 'BE'),
    'es' => array('ES'),
    'ca' => array('ES'),
    'de' => array('AT'),
    'ru' => array('RU')
  );
}

/**
 * Determine whether a language and a country may be exported together.
 *
 * @param type $lang_code
 * @param type $country_code
 * @return type
 */
function commerce_kiala_ps_language_combinations_match($lang_code, $country_code) {
  $combinations = commerce_kiala_ps_language_combinations();

  if (isset($combinations[$lang_code]) && in_array($country_code, $combinations[$lang_code])) {
    return TRUE;
  }
}

/**
 * Fetch the date when the order became checkout complete
 *
 * @param type $order
 * @return type
 */
function commerce_kiala_order_completed_date($order) {
  $results =
    db_select('commerce_order_revision', 'c')
    ->fields('c', array('revision_timestamp'))
    ->condition('c.status', 'checkout_complete')
    ->condition('c.order_id', $order->order_id)
    ->orderBy('c.revision_timestamp')
    ->range(0,1)
    ->execute()
    ->fetchAll();

  if (!empty($results)) {
    $revision = reset($results);
    return $revision->revision_timestamp;
  }
}
